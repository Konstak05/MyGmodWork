[Info]
Type:AdvDupe File
Creator:"Cipher Ultra"
Date:11/26/10
Description:"none"
Entities:6
Constraints:5
[More Information]
FileVersion:0.84
AdvDupeVersion:1.85
AdvDupeToolVersion:1.9
AdvDupeSharedVersion:1.72
SerialiserVersion:1.4
WireVersion:2302 (EXPORTED)

Head:168
HoldAngle:0,154.08,0
HoldPos:-10.7978,-20.9443,-13.1222
StartPos:8614.28,-7169.24,0.03125
[Save]
Entities:B2CA38{N:0=T:02A17D68;}02DA0738{N:0;N:0;N:0;}2D245EF0{Y:29=T:2D245DF0;}02D139F0{Y:14=N:168;Y:3=A:90,-2.73208e-005,0;Y:4=V:-33.8232,-20.999,29.7781;Y:5=N:0;Y:7=T:02D13C20;Y:9=Y:15;Y:2=Y:16;Y:13=T:02B18AB0;}02D1CAA0{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}02C81A78{N:0=T:02B2D5F0;}02D1C438{Y:7=T:02D1C9D8;Y:9=Y:46;Y:61=T:02D1C1E0;Y:14=N:168;Y:4=V:-64.3154,-22.4053,1.67535;Y:2=Y:55;Y:63=Y:62;Y:13=T:02D1C898;Y:3=A:-7.95931e-006,-91,1.38167e-007;Y:5=N:0;}02B2DD98{Y:2=Y:1;Y:3=A:8.73211e-021,-180,7.91681e-006;Y:4=V:-10.7979,-20.9443,13.1222;Y:5=N:0;Y:7=T:02B2CA38;Y:9=Y:8;Y:13=T:02B291A8;}H02D1A8B8{N:168=T:02B2DD98;N:172=T:02D139F0;N:169=T:02B32FC8;N:173=T:02CC37E8;N:170=T:02D1C438;N:171=T:2D996460;}02D0F198{Y:67;Y:39;Y:20;Y:44;}02CA27C8{;}02B17D68{Y:3=A:8.73211e-021,-180,7.91681e-006;Y:4=V:-10.7979,-20.9443,13.1222;Y:6=B:t;}02D1C258{Y:48=Y:47;Y:49=S:"0";}02CDBF50{Y:3=A:0.657632,-90.6385,0.143653;Y:4=V:-64.3711,-22.2026,0.415705;Y:6=B:f;}02D10750{N:25;N:-179.99996948242;N:2.3183151824924e-006;}02B32FC8{Y:7=T:02C858D0;Y:9=Y:31;Y:14=N:168;Y:4=V:-29.0088,-2.46484,14.9644;Y:2=Y:32;Y:5=N:0;Y:13=T:02D05508;Y:3=A:1.79347e-005,90,-3.46055e-013;}2D719060{N:0=T:2C99FFB0;}02DA4978{S:"a"=N:255;S:"r"=N:255;S:"g"=N:255;S:"b"=N:255;}02DA4158{Y:12=T:02D1B088;Y:36=T:02D22A68;Y:30=T:02D12D20;}02D0F1C0{Y:68;Y:69;Y:70;Y:71;}02B70878{Y:11=Y:33;}2DE73B48{;}4054AED0{;}02D1C988{;}02D12D70{Y:19=T:02D12E10;S:"Src"=N:171;Y:21=Y:39;Y:22=V:0.6,0.78,0.73;Y:23=T:02D17D20;Y:25=Y:24;Y:26=V:0.56,-3.91,2.18;Y:27=N:0;}02D12D20{S:"pod"=N:170;Y:29=T:02D12D48;}1D32DCA8{S:"a"=N:255;S:"r"=N:255;S:"g"=N:255;S:"b"=N:255;}02C858D0{N:0=T:02C81488;}02D17D98{Y:19=T:02D17DC0;S:"Src"=N:169;Y:21=Y:41;Y:22=V:0.11,3.91,0.28;Y:23=T:02DA4978;Y:25=Y:42;Y:26=V:-0.17,3.91,0.25;Y:27=N:2;}3FAEE420{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}2D996460{Y:7=T:2D719060;Y:3=A:2.50449e-006,3.09632e-005,-2.10111e-006;Y:9=Y:66;Y:72=T:02D12C58;Y:77=T:02DA61D8;Y:79=Y:78;Y:14=N:168;Y:4=V:-7.89941,-20.7822,18.6216;Y:2=Y:80;Y:82=Y:81;Y:13=T:2E0264B8;Y:121=T:02D022B8;Y:5=N:0;}02C81730{Y:19=T:02CA27C8;S:"Src"=N:171;Y:21=Y:44;Y:22=V:-1.11,1,0.73;Y:23=T:02B1EB40;Y:25=Y:24;Y:26=V:1.19,0.46,2.49;Y:27=N:0;}2E1FE998{Y:19=T:403A6748;S:"Src"=N:169;Y:21=S:"S";Y:22=V:-0.31,-1.83,2.36;Y:23=T:3FA80518;Y:25=Y:24;Y:26=V:1.63,0.65,0.73;Y:27=N:0;}02CC37E8{Y:7=T:02C81A78;Y:9=Y:37;Y:14=N:168;Y:4=V:-28.7979,-39.6846,14.9644;Y:2=Y:32;Y:38=N:0;Y:13=T:02DA4158;Y:3=A:1.79347e-005,90,-4.87611e-007;Y:5=N:0;}2DC09010{Y:19=T:2E0B3F30;S:"Src"=N:169;Y:21=S:"D";Y:22=V:0.23,-2.46,2.15;Y:23=T:2DF4E508;Y:25=Y:24;Y:26=V:-0.27,-0.73,0.73;Y:27=N:0;}3FB19620{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}02B30958{S:"a"=N:255;S:"r"=N:255;S:"g"=N:255;S:"b"=N:255;}4054AFD8{Y:19=T:4054AED0;S:"Src"=N:169;Y:21=S:"A";Y:22=V:2.51,-2.64,1.63;Y:23=T:2DFB1AC0;Y:25=Y:24;Y:26=V:-1.49,-1.13,0.73;Y:27=N:0;}2DF4E508{S:"a"=N:255;S:"r"=N:255;S:"g"=N:255;S:"b"=N:255;}02B291A8{Y:12=T:02B321B8;}2E0264B8{Y:12=T:2E026390;Y:30=T:2D245EF0;Y:36=T:3FD252C8;}02B2D5F0{Y:3=A:1.00179e-005,90,360;Y:4=V:-28.7979,-39.6846,14.9644;Y:6=B:f;}02CCE5F8{N:0;N:0;N:0;}02B18AB0{Y:12=T:02D13B58;Y:30=T:02D0E5E0;}2C99FFB0{Y:3=A:2.50448e-006,3.09632e-005,3.7146e-006;Y:4=V:-7.89941,-20.7822,18.6216;Y:6=B:f;}02D1C898{Y:64=T:02D1C988;Y:12=T:02B339F0;}2A271030{Y:19=T:3F9FCD68;S:"Src"=N:169;Y:21=Y:67;Y:22=V:-0.95,0.05,2.33;Y:23=T:2D1A1810;Y:25=Y:24;Y:26=V:-1.03,-0.05,0.73;Y:27=N:0;}02D1C1E0{Y:50=T:02D1C258;Y:52=Y:51;Y:54=Y:53;Y:2=Y:55;Y:57=Y:56;Y:9=Y:46;Y:58=T:02D1C230;Y:60=Y:59;}02CF2EF8{N:255;N:255;N:255;}02C90A00{N:0;N:0;N:0;}02DA41F8{N:255;N:255;N:255;}2D9BF360{Y:19=T:401E7890;S:"Src"=N:169;Y:21=Y:75;Y:22=V:-0.73,-3.91,1.54;Y:23=T:2DB83520;Y:25=Y:24;Y:26=V:-1.03,-0.33,0.73;Y:27=N:0;}2E026390{Y:11=S:"";}02C830A8{S:"A";S:"S";S:"R";S:"D";S:"Pod";Y:73;Y:74;Y:75;S:"W";Y:41;}2D245DF0{S:"A"=T:4054AFD8;S:"S"=T:2E1FE998;S:"R"=T:2E134170;S:"D"=T:2DC09010;S:"Pod"=T:2A271030;Y:73=T:2DB834C8;Y:74=T:2BAC25D8;Y:75=T:2D9BF360;S:"W"=T:2D41CCF8;Y:41=T:2D21AF18;}02B339F0{Y:11=Y:65;}02D1B088{Y:11=Y:33;}02CAED70{N:0;N:0;N:0;}02D022B8{Y:85=N:0;Y:86=N:104;Y:41=N:0;Y:88=Y:87;Y:89=N:0;Y:39=T:02D10750;Y:90=T:02D10778;S:"Clk"=N:0;Y:91=N:0;Y:92=N:1;Y:93=N:1;S:"Top"=N:1;Y:94=N:0;Y:95=N:0;Y:97=Y:96;Y:74=N:0;Y:98=N:0;Y:99=N:11;S:"A"=N:0;Y:100=N:1;Y:101=N:2.4;Y:102=N:3.0963223252911e-005;S:"D"=N:0;Y:103=N:-0.7;Y:104=N:0;Y:105=N:0;Y:106=T:02CCE5F8;Y:107=N:0;Y:108=N:0;Y:75=N:0;Y:40=T:02CAED70;Y:109=N:0;Y:110=T:02C897F0;S:"R"=N:0;Y:111=T:02DA41F8;S:"S"=N:0;Y:112=T:02C90A00;Y:113=N:1;Y:20=N:0;S:"W"=N:0;Y:44=V:8636.38,-7190.02,34.6528;Y:114=N:1;Y:115=N:1;Y:54=Y:116;Y:45=T:02DA0738;S:"Z"=N:18.652849197388;Y:117=N:0;Y:118=T:02CF2EF8;Y:120=Y:119;}02D10778{N:0;N:0;N:0;}02D12C58{T:02D0F198;T:02D0F1C0;}2CF5B758{;}3FD252C8{Y:23=T:3FB19620;Y:34=N:0;Y:35=N:0;}02D22A68{Y:23=T:02B30958;Y:34=N:0;Y:35=N:0;}02D13C20{N:0=T:02D18DB0;}2D21AF18{Y:19=T:2DE73B48;S:"Src"=N:169;Y:21=Y:41;Y:22=V:1.47,-1.06,2.38;Y:23=T:1D32DCA8;Y:25=Y:24;Y:26=V:1.12,0.05,0.73;Y:27=N:0;}2E481790{;}3FA80518{S:"a"=N:255;S:"r"=N:255;S:"g"=N:255;S:"b"=N:255;}2CF84788{S:"a"=N:255;S:"r"=N:255;S:"g"=N:255;S:"b"=N:255;}02C897F0{N:255;N:255;N:255;}02D0E5E0{Y:18=B:t;Y:29=T:02D12B68;}2D41CCF8{Y:19=T:40095B00;S:"Src"=N:169;Y:21=S:"W";Y:22=V:1.73,-0.04,2.42;Y:23=T:2CF84788;Y:25=Y:24;Y:26=V:-0.81,-1.37,0.73;Y:27=N:0;}2DB83520{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}2E0B3F30{;}2E134170{Y:19=T:2C956870;S:"Src"=N:169;Y:21=S:"R";Y:22=V:1.36,-1.89,2.2;Y:23=T:2DA20E68;Y:25=Y:24;Y:26=V:0.67,-1.98,0.73;Y:27=N:0;}02D17D20{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}02D0B4A8{S:"pod"=N:170;Y:29=T:02D2C338;}02D18310{Y:23=T:02D18338;Y:34=N:0;Y:35=N:0;}2CF5B630{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}403A6748{;}2D1A1810{S:"a"=N:255;S:"b"=N:255;S:"g"=N:255;S:"r"=N:255;}02B2CC18{Y:70;Y:70;Y:70;Y:70;Y:68;Y:76;Y:70;Y:70;Y:70;Y:70;}02B1BF80{Y:19=T:02D12B90;S:"Src"=N:171;Y:21=Y:20;Y:22=V:-1.94,-2.85,0.73;Y:23=T:02D1CAA0;Y:25=Y:24;Y:26=V:0.28,-0.12,0.33;Y:27=N:0;}02D2C338{;}3F9FCD68{;}02D12D48{Y:40=T:02D12D70;Y:43=T:02D17D98;Y:45=T:02C81730;}2DA20E68{S:"a"=N:255;S:"r"=N:255;S:"g"=N:255;S:"b"=N:255;}401E7890{;}02D13B58{Y:11=Y:17;}2DB834C8{Y:19=T:2CF5B758;S:"Src"=N:172;Y:21=Y:83;Y:22=V:-5.13,3.67,0.33;Y:23=T:2CF5B630;Y:25=Y:24;Y:26=V:-1.48,-3.01,0.73;Y:27=N:0;}2DFB1AC0{S:"a"=N:255;S:"r"=N:255;S:"g"=N:255;S:"b"=N:255;}02D05508{Y:12=T:02B70878;Y:36=T:02D18310;Y:30=T:02D0B4A8;}40095B00{;}02D18338{S:"a"=N:255;S:"r"=N:255;S:"g"=N:255;S:"b"=N:255;}02D1C9D8{N:0=T:02CDBF50;}02D18DB0{Y:3=A:90,180,180;Y:4=V:-33.8232,-20.999,29.7781;Y:6=B:f;}02D12B90{;}02D12E10{;}02DA61D8{T:02C830A8;T:02B2CC18;}02D12B68{Y:28=T:02B1BF80;}02D1C230{;}02C81488{Y:3=A:1.00179e-005,90,-2.1011e-006;Y:4=V:-29.0088,-2.46484,14.9644;Y:6=B:f;}02B1EB40{S:"a"=N:255;S:"r"=N:255;S:"g"=N:255;S:"b"=N:255;}2BAC25D8{Y:19=T:2E481790;S:"Src"=N:169;Y:21=Y:84;Y:22=V:1.89,-1.89,2.33;Y:23=T:3FAEE420;Y:25=Y:24;Y:26=V:1.83,2.92,0.73;Y:27=N:0;}02D17DC0{;}02B321B8{Y:11=Y:10;}2C956870{;}
Constraints:02D1EF08{Y:122=N:170;Y:123=N:0;}02B2F008{Y:67=T:02B30520;Y:92=Y:124;}02CC7988{Y:122=N:168;Y:123=N:0;}02B30520{T:02D235A8;T:02D25150;}02D19FA8{Y:122=N:168;Y:123=N:0;}02B2FCB0{T:02D1EF08;T:02D14238;}02B16F58{Y:67=T:02D1C500;Y:92=Y:124;}02C817A8{Y:122=N:173;Y:123=N:0;}02D1C500{T:02D0C7B8;T:02B30C78;}02D0C7B8{Y:122=N:172;Y:123=N:0;}02DA6840{Y:67=T:02B2FCB0;Y:92=Y:124;}H2C489DE8{T:02B2F008;T:02D19558;T:02B16F58;T:02DA6840;T:02D18E78;}02D235A8{Y:122=N:171;Y:123=N:0;}02D18E78{Y:67=T:02D19EB8;Y:92=Y:124;}02D25150{Y:122=N:168;Y:123=N:0;}02D19F30{Y:122=N:169;Y:123=N:0;}02D19EB8{T:02D19F30;T:02D19FA8;}02D19558{Y:67=T:02B33090;Y:92=Y:124;}02D14238{Y:122=N:168;Y:123=N:0;}02B30C78{Y:122=N:168;Y:123=N:0;}02B33090{T:02C817A8;T:02CC7988;}
1:"models/hunter/plates/plate1x1.mdl"
2:"Model"
3:"LocalAngle"
4:"LocalPos"
5:"Skin"
6:"Frozen"
7:"PhysicsObjects"
8:"prop_physics"
9:"Class"
10:"models/props_wasteland/wood_fence01a"
11:"MaterialOverride"
12:"material"
13:"EntityMods"
14:"SavedParentIdx"
15:"gmod_wire_consolescreen"
16:"models/cheeze/pcb/pcb4.mdl"
17:"phoenix_storms/wood"
18:"extended"
19:"Path"
20:"Refresh"
21:"SrcId"
22:"SrcPos"
23:"Color"
24:"arrowire/arrowire2"
25:"Material"
26:"StartPos"
27:"Width"
28:"Reset"
29:"Wires"
30:"WireDupeInfo"
31:"gmod_wire_adv_pod"
32:"models/jaanus/wiretool/wiretool_range.mdl"
33:"models/props_combine/combine_interface_disp"
34:"RenderMode"
35:"RenderFX"
36:"colour"
37:"gmod_wire_cameracontroller"
38:"Static"
39:"CamAngle"
40:"Angle"
41:"Active"
42:"cable/rope"
43:"Activated"
44:"CamPosition"
45:"Position"
46:"prop_vehicle_prisoner_pod"
47:"scripts/vehicles/prisoner_pod.txt"
48:"vehiclescript"
49:"limitview"
50:"KeyValues"
51:"A Seat from VALVe's Jeep"
52:"Information"
53:"Jeep Seat"
54:"Name"
55:"models/nova/jeep_seat.mdl"
56:"VALVe"
57:"Author"
58:"Members"
59:"Half-Life 2"
60:"Category"
61:"VehicleTable"
62:"Seat_Jeep"
63:"VehicleName"
64:"VehicleMemDupe"
65:"phoenix_storms/FuturisticTrackRamp_1-2"
66:"gmod_wire_expression2"
67:"Entity"
68:"ENTITY"
69:"ANGLE"
70:"NORMAL"
71:"VECTOR"
72:"_outputs"
73:"Screen"
74:"Horn"
75:"Space"
76:"WIRELINK"
77:"_inputs"
78:"Boats Single"
79:"_name"
80:"models/beer/wiremod/gate_e2.mdl"
81:"@name Boats Single€@inputs Active Pod:entity€@inputs R W A S D Horn Space Screen:wirelink€@outputs CamPosition:vector CamAngle:angle Entity:entity Refresh€@persist Type CamClk Spawn Clk AdjustCamF AdjustCamZ€@persist [Colour Colour1 Colour2 Position]:vector Drive Inertia€@persist [Mat1 Mat2 Metal Name]:string Front Rear Pitch Z Bottom Top Random€@persist Angle:angle Forward Turn Dturn ColNum Option Boat Spin Vector:vector Waves Wave Splash Chip:entity€if(dupefinished()|first()){Spawn = 0,Refresh = 1}€€if(Spawn < 11){€    €interval(100)€    Spawn++€    Chip=entity()€€€### Common €€Mat2 = £phoenix_storms/fender_white£€Metal =£phoenix_storms/grey_steel£€Mat1 = £phoenix_storms/mat/mat_phx_plastic£€€holoCreate(Spawn)€holoModel(1, £cylinder£)€holoModel(2, £torus_thick£) €holoScale(2, vec(0.14,0.14,0.1))€€ holoModel(8, £hdome£)€holoAng(8,Chip:toWorld(ang(-10,0,0)))€  holoClipEnabled(8,1)€  holoClip(8,vec(0.2,0,0),vec(0.2,0,0),0)€€   holoParent(2,1)€   holoParent(3,1)€   holoParent(4,1)€   holoParent(5,1)€   holoParent(6,1)€   holoParent(7,1)€   holoParent(8,1)€   holoParent(9,1)€   holoParent(10,1)€   holoParent(11,1)€€   holoMaterial(1,  £phoenix_storms/dome£)€   holoMaterial(2, £phoenix_storms/mat/mat_phx_carbonfiber2£)€   holoMaterial(3, Mat1)€   holoMaterial(4, Mat1)€   holoMaterial(5, Mat2)€   holoMaterial(6, Mat2)€   holoMaterial(7, Mat1)€   holoMaterial(8, £phoenix_storms/glass£)€   holoMaterial(9, Metal)€   holoMaterial(10, Mat2)€   holoMaterial(11, Mat2)€€ Entity=holoEntity(1)€ColNum = 1€Colour1 = vec(255,255,255)€Colour2 = vec(255,255,255)€Boat = 1€Option=1€Bottom=1€Top=1€Clk=0€Drive = 0€Chip:setAlpha(0)€€}else{€runOnTick(1)€€if(Space & ~Space){Drive = !Drive}€   €€      if(Drive==0 & !tickClk()){soundStop(1),soundStop(2),soundStop(3)€                       €         Option += S-W€         Option =  Option%3€         Option += ( Option<1)*3€                €           €    if(Option ==1){€                €        Boat += D-A€        Boat = Boat%4€        Boat += (Boat<1)*4€    €}elseif(Option == 2){ €€        Top += (D-A)€        Top = Top%12€        Top += (Top<1)*12€        €        ColNum = Top€ €        €}elseif(Option == 3){ €€        Bottom += (D-A)€        Bottom = Bottom%12€        Bottom += (Bottom<1)*12€        €        ColNum = Bottom  €€}€€        if(ColNum == 1){Colour = vec(255,255,255)}    #White€        elseif(ColNum == 2){Colour = vec(175,175,175)}#Silver€        elseif(ColNum == 3){Colour = vec(0,0,0)}      #Black€        elseif(ColNum == 4){Colour = vec(255,0,0)}    #Red€        elseif(ColNum == 5){Colour = vec(255,175,0)}  #Orange€        elseif(ColNum == 6){Colour = vec(255,255,0)}  #Yellow€        elseif(ColNum == 7){Colour = vec(0,255,0)}    #Green€        elseif(ColNum == 8){Colour = vec(0,255,175)}  #Turquoise€        elseif(ColNum == 9){Colour = vec(0,255,255)}  #Cyan€        elseif(ColNum == 10){Colour = vec(0,0,255)}   #Blue€        elseif(ColNum == 11){Colour = vec(175,0,255)} #Magenta€        elseif(ColNum == 12){Colour = vec(255,0,255)} #Pink€€if(changed(Top)){Colour2 = Colour}€elseif(changed(Bottom)){Colour1 = Colour}€€    holoColor(1, Colour1)€    holoColor(2, Colour2) €    holoColor(3, Colour1)€    holoColor(4, Colour1)€    holoColor(5, Colour2)€    holoColor(6, Colour2)€    holoColor(7, Colour2)€    €    holoColor(9, Colour1)€    holoColor(10, Colour1)€    holoColor(11, Colour1)€€}elseif(Drive == 0 & tickClk()){Spin= angnorm(Spin + 0.5),holoAng(1,Chip:toWorld(ang(0,Spin,0)))€       €        holoPos(1, Chip:toWorld(vec(0,0,0))) €        CamPosition = Chip:toWorld(vec(30,0,16))€        CamAngle = Chip:toWorld(ang(25,180,0))€        Forward = 0€        Turn = Chip:toWorld(ang(0,0,0)):yaw()€        Z = Chip:pos():z()€        Front = 0€        Rear = 0€        Wave=1€        CamClk = 0€€       €     if(changed(Option))€        {Chip:soundPlay(4,0,£weapons/ar2/ar2_empty.wav£)}€            €        elseif(changed(Boat)|changed(Top)|changed(Bottom))€        {Chip:soundPlay(4,0,£weapons/ar2/ar2_reload_push.wav£)€            Refresh = !Refresh}€        €        €        Screen:writeString(£Cipher_Ultra's Boat Racers£,1,0,999)€        Screen:writeString(£Customise your Boat!£,1,2,999)€        Screen:writeString(£[W/S] keys = Scroll Options.£,1,3,999)€        Screen:writeString(£[A/D] keys = Scroll Styles.£,1,4,999)€        Screen:writeString(£BOAT TYPE: £ + Boat + £/4 - £ + Name,1,6,999,(Option==1)*69)€        Screen:writeString(£Colour 1: £ + Top + £/12£,1,7,999,(Option==2)*69)€        Screen:writeString(£Colour 2: £ + Bottom + £/12£,1,8,999,(Option==3)*69) €€        Screen:writeString(£Press [Space] to Drive£,1,12,999)€    €if(changed(Boat)|changed(Active)){Spin = 0€€holoAng(1,Chip:toWorld(ang(0,0,0)))€holoAng(2,Entity:toWorld(ang(90,0,0)))€    €if(Boat == 1){€Type=1€Name = £Squallo£€###Main€€ holoScale(1, vec(0.26,0.9,0.06))€€#Steering€  holoPos(2, Chip:toWorld(vec(3.2,0,0.2))) €€#Lower bow€  holoPos(3, Chip:toWorld(vec(3.4,0,0.2)))  holoModel(3, £dome£)  holoScale(3, vec(0.5,1,3))€ holoAng(3,Chip:toWorld(ang(90,0,0)))€  holoClipEnabled(3,1)€  holoClip(3,vec(0.2,0,0),vec(0.2,0,0),0)€#Lower stern€  holoPos(4, Chip:toWorld((vec(0,0,0.2))))  holoModel(4, £cylinder£)  holoScale(4, vec(0.5,1,0.6))€  holoAng(4,Chip:toWorld(ang(90,0,0)))€  holoClipEnabled(4,1)€  holoClip(4,vec(0.2,0,0),vec(0.2,0,0),0)€€#upper bow€  holoPos(5, Chip:toWorld(vec(3.3,0,0.1)))  holoModel(5, £dome£)  holoScale(5, vec(0.12,1.06,3.1))€  holoAng(5,Chip:toWorld(ang(90,0,0)))€#upper stern€  holoPos(6, Chip:toWorld(vec(-1.8,0,0.1)))  holoModel(6, £cylinder£)  holoScale(6,vec(0.2,1.04,0.3))€ holoAng(6,Chip:toWorld(ang(90,0,0)))€€#Interiour€  holoPos(7, Chip:toWorld(vec(2,0,0.2)))  holoModel(7, £hdome£)  holoScale(7, vec(1,0.98,0.4))€  holoAng(7,Chip:toWorld(ang(180,0,0)))€€#Screen€  holoPos(8, Chip:toWorld(vec(3.4,0,0.5)))  holoScale(8, vec(0.3,1,0.36))€€  holoPos(9, Chip:toWorld(vec(-3.2,2.2,1.6)))  holoModel(9, £dome£)  holoScale(9, vec(0.3,0.12,0.9))€  holoAng(9,Chip:toWorld(ang(185,0,0)))€€  holoPos(10, Chip:toWorld(vec(-3.2,-2.2,1.6)))  holoModel(10, £dome£)  holoScale(10, vec(0.3,0.12,0.9))€  holoMaterial(10, Metal) holoAng(10,Chip:toWorld(ang(185,0,0)))€ €  holoPos(11, Chip:toWorld(vec(13,0,0.54)))  holoModel(11, £cylinder£)  holoScale(11,vec(1.5,0.08,0.1))€  holoAng(11,Chip:toWorld(ang(2.1,0,90)))€€AdjustCamF = -0.7€AdjustCamZ = 2.4€€}elseif(Boat == 2){€###### Test€Type = 2€Name = £Catamaran£€###Main€€  holoScale(1, vec(0.3,0.84,0.1))€€#Steering€  holoPos(2, Chip:toWorld(vec(3.8,0,0.26)))  €€#Lower left€  holoPos(3, Chip:toWorld(vec(4,4.6,0.2)))  holoModel(3, £dome£)  holoScale(3, vec(2.3,0.3,0.5))€  holoAng(3,Chip:toWorld(ang(180,0,0)))€  holoClipEnabled(3,0)€€#Lower right€  holoPos(4, Chip:toWorld((vec(4,-4.6,0.2))))  holoModel(4, £dome£)  holoScale(4, vec(2.3,0.3,0.5))€  holoAng(4,Chip:toWorld(ang(180,0,0)))€  holoClipEnabled(4,0)€€#upper left€  holoPos(5, Chip:toWorld(vec(4,4.6,0.1)))  holoModel(5, £dome£)  holoScale(5, vec(2.3,0.3,0.1))€  holoAng(5,Chip:toWorld(ang(0,0,0)))€#upper right€  holoPos(6, Chip:toWorld(vec(4,-4.6,0.1)))  holoModel(6, £dome£)  holoScale(6,vec(2.3,0.3,0.1))€  holoAng(6,Chip:toWorld(ang(0,0,0)))€€#Interiour€  holoPos(7, Chip:toWorld(vec(4,0,0.2)))  holoModel(7, £hdome£)  holoScale(7, vec(1.6,1,0.4))€  holoAng(7,Chip:toWorld(ang(180,0,0)))€€#Screen€  holoPos(8, Chip:toWorld(vec(3.8,0,0.5))) holoScale(8, vec(0.3,1,0.36))€€€  holoPos(9, Chip:toWorld(vec(-5,0,2)))  holoModel(9, £dome£)  holoScale(9, vec(0.3,0.2,0.9))€  holoAng(9,Chip:toWorld(ang(190,0,0)))€€  holoPos(10, Chip:toWorld(vec(0,0,0.5)))  holoModel(10, £dome£)  holoScale(10, vec(0.4,0.8,1))€  holoMaterial(10, Mat2) holoAng(10,Chip:toWorld(ang(-100,0,0)))€€  holoPos(11, Chip:toWorld(vec(3.9,0,0.16)))  holoModel(11, £dome£)  holoScale(11,vec(0.18,0.8,1.8))€  holoAng(11,Chip:toWorld(ang(90,0,0)))€€€AdjustCamF = 0.7€AdjustCamZ = 1.7€€}elseif(Boat == 3){€Type = 3€Name = £Jetmax£€###Main€€ holoScale(1, vec(0.26,0.9,0.06))€€€#Steering€  holoPos(2, Chip:toWorld(vec(3.4,0,0.3))) €#Lower bow€  holoPos(3, Chip:toWorld(vec(3.5,0,0.2)))  holoModel(3, £dome£)  holoScale(3, vec(0.5,1,3))€  holoAng(3,Chip:toWorld(ang(90,0,0)))€  holoClipEnabled(3,1)€  holoClip(3,vec(0.2,0,0),vec(0.2,0,0),0)€#Lower stern€  holoPos(4, Chip:toWorld((vec(0,0,0.2))))  holoModel(4, £cylinder£)  holoScale(4, vec(0.5,1,0.6))€  holoAng(4,Chip:toWorld(ang(90,0,0)))€  holoClipEnabled(4,1)€  holoClip(4,vec(0.2,0,0),vec(0.2,0,0),0)€€#upper bow€  holoPos(5, Chip:toWorld(vec(3.4,0,0.2)))  holoModel(5, £dome£)  holoScale(5, vec(0.16,1.06,3.1))€  holoAng(5,Chip:toWorld(ang(90,0,0)))€#upper stern€  holoPos(6, Chip:toWorld(vec(-1.8,0,0.1)))  holoModel(6, £cylinder£)  holoScale(6,vec(0.2,1.04,0.32))€  holoAng(6,Chip:toWorld(ang(90,0,0)))€€#Interiour€  holoPos(7, Chip:toWorld(vec(2,0,0.2)))  holoModel(7, £hdome£)  holoScale(7, vec(1,0.98,0.4))€  holoAng(7,Chip:toWorld(ang(180,0,0)))€€#Screen€  holoPos(8, Chip:toWorld(vec(3.4,0,0.5))) holoScale(8, vec(0.3,1,0.36))€€€  holoPos(9, Chip:toWorld(vec(-1.8,0,1.1)))  holoModel(9, £cylinder£)  holoScale(9, vec(0.1,0.5,0.3))€  holoAng(9,Chip:toWorld(ang(90,0,0)))€€  holoPos(10, Chip:toWorld(vec(11.6,2.4,0.9)))  holoModel(10, £rcylinder£)  holoScale(10,vec(1.3,0.06,0.1))€  holoMaterial(10, Mat2) holoAng(10,Chip:toWorld(ang(2,-2,-96)))€€  holoPos(11, Chip:toWorld(vec(11.6,-2.4,0.9)))  holoModel(11, £cylinder£)  holoScale(11,vec(1.3,0.06,0.1))€  holoAng(11,Chip:toWorld(ang(2,2,96)))€€AdjustCamF = -0.6€AdjustCamZ = 2.4€€}elseif(Boat == 4){€Type = 4€Name = £Speeder£€€#Main€  holoScale(1, vec(0.5,0.9,0.06))€€€#Steering€  holoPos(2, Chip:toWorld(vec(5.8,0,0.4)))  €€#Lower bow€  holoPos(3, Chip:toWorld(vec(5.9,0,0.2)))  holoModel(3, £dome£)  holoScale(3, vec(0.5,1,2.7))€  holoAng(3,Chip:toWorld(ang(90,0,0)))€  holoClipEnabled(3,1)€  holoClip(3,vec(0.2,0,0),vec(0.2,0,0),0)€€#Lower stern€  holoPos(4, Chip:toWorld(vec(0,0,0.2)))  holoModel(4, £cylinder£)  holoScale(4, vec(1,0.5,1))€  holoAng(4,Chip:toWorld(ang(0,90,90)))€  holoClipEnabled(4,1)€  holoClip(4,vec(0,-0.2,0),vec(0,-0.2,0),0)€€#upper bow€€  holoPos(5, Chip:toWorld(vec(5.8,0,0.2)))  holoModel(5, £dome£)  holoScale(5, vec(0.18,1.06,2.8))€  holoAng(5,Chip:toWorld(ang(90,0,0)))€€#upper stern€€  holoPos(6, Chip:toWorld(vec(-2,0,0.1)))  holoModel(6, £cylinder£)  holoScale(6,vec(0.16,1.04,0.68))€  holoAng(6,Chip:toWorld(ang(90,0,0)))€€#Interiour€€  holoPos(7, Chip:toWorld(vec(4,0,0)))  holoModel(7, £hdome£)  holoScale(7, vec(1.8,1,0.4))€  holoAng(7,Chip:toWorld(ang(180,0,0)))€€€#Screen€  holoPos(8, Chip:toWorld(vec(6,0,0.3)))  holoScale(8, vec(0.2,1,0.4))€€€  holoPos(9, Chip:toWorld(vec(-6,2,1.6)))  holoModel(9, £dome£)  holoScale(9, vec(0.2,0.1,1))€  holoAng(9,Chip:toWorld(ang(185,0,0)))€€  holoPos(10, Chip:toWorld(vec(-6,-2,1.6)))  holoModel(10, £dome£)  holoScale(10, vec(0.2,0.1,1))€  holoMaterial(10, Metal) holoAng(10,Chip:toWorld(ang(185,0,0)))€ €  holoPos(11, Chip:toWorld(vec(-3.1,0,0.2)))  holoModel(11, £cylinder£)  holoScale(11,vec(0.24,0.7,0.4))€  holoAng(11,Chip:toWorld(ang(90,0,0)))€€€€AdjustCamF = 2€AdjustCamZ = 2.4€€}€}#end boat€€            €}€    €    if(Space & ~Space){€ €             Entity:soundPlay(2,0,£vehicles/airboat/pontoon_stopped_water_loop1.wav£)€             Entity:soundPlay(3,0,£vehicles/airboat/pontoon_fast_water_loop2.wav£)€    €                        €            if(Type == 1){€                Entity:soundPlay(1,0,£plats/tram_move.wav£)€            }elseif(Type == 2){€                Entity:soundPlay(1,0,£vehicles/airboat/fan_motor_fullthrottle_loop1.wav£)€            }elseif(Type == 3){€                Entity:soundPlay(1,0,£plats/elevator_move_loop1.wav£)€            }elseif(Type == 4){€                Entity:soundPlay(1,0,£vehicles/crane/crane_extend_loop1.wav£)€            }€            €            soundPitch(1,200)€            Pod:hintDriver(£W = Forward£,7)€            Pod:hintDriver(£S = Reverse£,7)€            Pod:hintDriver(£A & D = Left & Right£,7)€            Pod:hintDriver(£Reload to Change View£,7)€            €                     Vector = Chip:toWorld(vec(0,0,10))€                    Turn = Chip:toWorld(ang(0,0,0)):yaw()€            €        }€€         €   €    if(Drive==1){€        runOnTick(1)€      €       if(tickClk()){€    €      €            if(abs(Pitch)<35){€            if(!(W|S)){€                Forward-=(inrange(Forward,-1,1) ? Forward : sign(Forward)*0.5)€            }elseif(S& Forward >-180) {€                Forward-=1+1*(Forward>0)€            }elseif(W& Forward <600) {€                Forward+=1.5*(Forward>248 ? 1-(Forward-300)/300 : 1)€                €            }€            €                   Forward-=(Dturn*sign(Dturn)*0.01)*sign(Forward)€                €            }else{Forward-=(Forward > 1)}€        €                if(A|D){€                    €                    Dturn = clamp(Dturn+(A-D)*0.6,-45,45)€                    if((A-D) & sign(Dturn) != (A-D)){€                        Dturn -= (inrange(Dturn,-1,1) ? Dturn : sign(Dturn))*1€                    }€                    €            }elseif(Dturn<-1|Dturn>1){Dturn -= sign(Dturn)*1}€            elseif(Dturn!= 0){Dturn = 0}€              €             if(abs(Pitch)<50){           €                           €              Turn=(Turn+((Dturn*0.03)*((Forward)<140 ? (Forward/140) : 1))-Inertia*0.04)€            }€             €    €        rangerHitWater(1)€        Front =  rangerOffset(100,Position+Angle:up()*2+Angle:forward()*10,Angle:up()*-1):distance()€         rangerHitWater(1)€             Rear =   rangerOffset(100,Position+Angle:up()*2+Angle:forward()*-10,Angle:up()*-1):distance()€             €        €        Pitch = clamp(angnorm(Pitch + ((Front-Rear)*0.4)),-45,45)€        Roll = clamp(Dturn * (Forward*sign(Forward))*0.0002,-15,15) €       €        if(Waves > 30){Wave=-1}€        elseif(Waves < -45){Wave=1}€        €€        Waves += Wave * (50-Waves*sign(Waves))*0.02€    €    €     Z = (Waves*0.005 + 3.8 + Z) -(clamp((Front+Rear)/2,-20,clamp(12-(Forward*0.04),5,10)))€                     €     €            ###############€                €        soundPitch(1,((Forward*sign(Forward)*0.1)+30))€        soundVolume(2,100-Forward)€        soundVolume(3,Forward*0.001)€            €    if(A&Forward>50|D&Forward>50){€        Inertia =clamp(Inertia+(angnorm($Angle:yaw()*0.0003*Forward)),-Forward*0.03,Forward*0.03)}€           elseif(Inertia<-3|Inertia>3){Inertia -= sign(Inertia)*3}€           elseif(Inertia<-0.1|Inertia>0.1){Inertia -= sign(Inertia)*0.1}€           else{Inertia = 0}  €        €            Angle = ang(((Pitch)-Forward*0.08)+Waves*0.02,Turn,Roll)€            Vector =  (Vector+(Angle-ang(0,Inertia,0)):forward()*Forward*0.01)€              €             Position =  (Vector:setZ(Z)-$Vector:setZ(0)*Forward*0.04)€            €        holoPos(1,Position)€        holoAng(1,Angle)€     €  }## tick €€  €        if(R & ~R){€            CamClk = !CamClk€        }€        €         if(Horn & ~Horn){€    Entity:soundPlay(4,0,£synth/saw.wav£)€         soundPitch(4,60)}€    elseif(!Horn &  ~Horn){soundStop(4)}€        €        if(CamClk == 0){€            CamPosition = Position + (Angle:forward() *(AdjustCamF)) +(Angle:up() *(AdjustCamZ))€            CamAngle = (Angle) €        }else{€            CamPosition = Position + (CamAngle:forward() *-32) +(Angle:up() *14)€            CamAngle = (Angle - ang(-10,0,Roll)) €        }€    €    €        €        €      holoAng(2,Entity:toWorld(ang(Dturn*6,90,90)))€ €€€}€}€€€€€€€€"
82:"_original"
83:"link"
84:"Shift"
85:"Pitch"
86:"Spin"
87:"phoenix_storms/mat/mat_phx_plastic"
88:"Mat1"
89:"Dturn"
90:"Vector"
91:"Waves"
92:"Type"
93:"Bottom"
94:"Rear"
95:"Front"
96:"phoenix_storms/fender_white"
97:"Mat2"
98:"Inertia"
99:"Spawn"
100:"Boat"
101:"AdjustCamZ"
102:"Turn"
103:"AdjustCamF"
104:"CamClk"
105:"Drive"
106:"$Vector"
107:"Roll"
108:"Splash"
109:"Random"
110:"Colour"
111:"Colour2"
112:"$Angle"
113:"Option"
114:"ColNum"
115:"Wave"
116:"Squallo"
117:"Forward"
118:"Colour1"
119:"phoenix_storms/grey_steel"
120:"Metal"
121:"_vars"
122:"Index"
123:"Bone"
124:"NoCollide"
Saved:251
